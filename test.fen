extern (add x y)
extern (sub x y)
extern (mul x y)
extern (div x y)
extern (mod x y)
extern (eq x y)
extern (ne x y)
extern (lt x y)
extern (lte x y)
extern (gt x y)
extern (gte x y)
extern (or x y)
extern (and x y)
extern (not x)
extern (bitwiseOr x y)
extern (bitwiseAnd x y)

constant _16BIT_WORD_SIZE = 2
constant _32BIT_WORD_SIZE = 4
constant _64BIT_WORD_SIZE = 8
constant WORD_SIZE = _64BIT_WORD_SIZE // CHANGE/CHECK THIS BEFORE COMPILING ON A NEW ARCHITECTURE

extern (storeWord ptr value)
extern (loadWord ptr)
extern (storeByte ptr value)
extern (loadByte ptr)

extern (putc char)
extern (putn string length)
extern (getc)

extern (exit code)

extern (open path flags)
extern (close fd)
extern (read fd buffer length)
extern (write fd buffer length)

intern (strlen string)
intern (print string)
intern (printi number base)
intern (scan string n)
intern (printf format argc...)

constant O_RDONLY = 0
constant O_WRONLY = 1
constant O_RDWR = 2

public (main argc argv...; name) {
	(printf "Test int: %i\nTest string: \"%s\"\nTest char: '%c'\n" 13 "Hello World!" 67)
	(printf "Please enter your name: ")
	allocate name[64]
	(scan name 64)
	(printf "Hello and welcome to fennec, %s!\n" name)
	return 0
}

private (strlenUntil char string; len) {
	len := 0
	while (and (loadByte (add string len)) (ne (loadByte (add string len)) char)) {
		len := (add len 1)
	}
	return len
}

private (strlen string; len) {
	len := 0
	while (loadByte (add string len)) {
		len := (add len 1)
	}
	return len
}

private (print string) {
	return (putn string (strlen string))
}

private printi_buffer[64]

private (printi n base; buffer rem) {
	buffer := printi_buffer
	(storeByte buffer 0)
	
	while (gte n base) {
		rem := (mod n base)
		ifelse (lt rem 10) rem := (add rem 48)
		else rem := (add rem 55)
		(storeByte {buffer := (add buffer 1)} rem)
		n := (div n base)
	}

	rem := (mod n base)
	ifelse (lt rem 10) rem := (add rem 48)
	else rem := (add rem 55)
	(storeByte {buffer := (add buffer 1)} rem)
	
	while (loadByte buffer) {
		(putc (loadByte buffer))
		buffer := (sub buffer 1)
	}
}

private (scan buffer n; char) {
	char := (getc)
	while (ne char '\n') {
		n := (sub n 1)
		if (gt n 0) (storeByte buffer char)
		buffer := (add buffer 1)
		char := (getc)
	}
	(storeByte buffer 0)
}

private (printf format args...) {
	while (loadByte format) {
		format := (add format (putn format (strlenUntil '%' format)))
		if (eq (loadByte format) '%') {
			format := (add format 1)
			
			ifelse (eq (loadByte format) 's') {
				(print (loadWord args))
				args := (add args WORD_SIZE)
			} else ifelse (eq (loadByte format) 'i') {
				(printi (loadWord args) 10)
				args := (add args WORD_SIZE)
			} else ifelse (eq (loadByte format) 'c') {
				(putc (loadWord args))
				args := (add args WORD_SIZE)
			} else {
				(putc (loadByte format))
			}
			format := (add format 1)
		}
	}
}

