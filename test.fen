extern (add x y)
extern (sub x y)
extern (mul x y)
extern (div x y)
extern (mod x y)
extern (lt x y)
extern (lte x y)
extern (gt x y)
extern (gte x y)
extern (or x y)
extern (and x y)
extern (bitwiseOr x y)
extern (bitwiseAnd x y)

extern (storeWord ptr value)
extern (loadWord ptr)
extern (storeByte ptr value)
extern (loadByte ptr)

extern (putc char)
extern (putn string length)
extern (getc)

extern (exit code)

extern (open path flags)
extern (close fd)
extern (read fd buffer length)
extern (write fd buffer length)

intern (strlen string)
intern (print string)
intern (scan string n)

constant O_RDONLY = 0
constant O_WRONLY = 1
constant O_RDWR = 2
constant O_ACCMODE = 3
constant O_APPEND = 2000

constant BUFFER_SIZE = 64

public (main argc argv; fd buffer readed) {
	if (gt argc 1) {
		let fd = (open (loadWord (add argv 4)) O_RDONLY)
		
		allocate [buffer BUFFER_SIZE]
		
		let readed = 1
		while readed {
			let readed = (read fd buffer BUFFER_SIZE)
			(putn buffer readed)
		}
		
		(close fd)
		return 0
	}
	return 1
}

private (print string) {
	(putn string (strlen string))
}

private (strlen string; len) {
	let len = 0
	while (loadByte (add string len)) {
		let len = (add len 1)
	}
	return len
}

private (scan buffer n; char) {
	let char = (getc)
	while (sub char 10) {
		let n = (sub n 1)
		if (lt 0 n) (storeByte buffer char)
		let buffer = (add buffer 1)
		let char = (getc)
	}
	(storeByte buffer 0)
}
