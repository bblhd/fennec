include "system"

intern (strlen string)
intern (print string)
intern (printi number base)
intern (scan string n)
intern (printf format argc...)

private (strlenUntil char string; len) {
	len := 0
	while (and (loadByte (add string len)) (ne (loadByte (add string len)) char)) {
		len := (add len 1)
	}
	return len
}

private (strlen string; len) {
	len := 0
	while (loadByte (add string len)) {
		len := (add len 1)
	}
	return len
}

private (print string) {
	return (syscall SYS_WRITE 1 string (strlen string))
}

private printi_buffer[32]

private (printi n base; buffer rem) {
	buffer := (add printi_buffer 32)
	(storeByte {buffer := (sub buffer 1)} 0)
	
	while (gt n 0) {
		rem := (mod n base)
		rem := (add rem {if (lt rem 10) 48 else 55})
		
		if (gt buffer printi_buffer) {
			(storeByte {buffer := (sub buffer 1)} rem)
		}
		
		n := (div n base)
	}
	
	(syscall SYS_WRITE 1 buffer (sub (add printi_buffer 32) buffer))
}

private (scan buffer n; char) {
	if (lte n 0) return 0
	(syscall SYS_READ 1 buffer 1)
	while (ne (loadByte buffer) '\n') {
		if (gt n 1) {
			buffer := (add buffer 1)
			n := (sub n 1)
		}
		(syscall SYS_READ 1 buffer 1)
	}
	(storeByte buffer 0)
}

private (printf format args...) {
	while (loadByte format) {
		format := (add format (syscall SYS_WRITE 1 format (strlenUntil '%' format)))
		
		if (eq (loadByte format) '%') {
			format := (add format 1)
			
			if (eq (loadByte format) 's') {
				(print (loadWord args))
				args := (add args WORD_SIZE)
			} else if (eq (loadByte format) 'i') {
				(printi (loadWord args) 10)
				args := (add args WORD_SIZE)
			} else if (eq (loadByte format) 'c') {
				(syscall SYS_WRITE 1 args 1)
				args := (add args WORD_SIZE)
			}
			format := (add format 1)
		}
	}
}

