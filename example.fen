extern (add x y)
extern (sub x y)
extern (mul x y)

extern (sgt x y) //signed greater than
extern (sge x y) //signed greater than or equal

extern (printint x) //prints integer

namespace example

private (I x) return x

public (factorial_recur n) {
	if (sgt n 0) return (mul n (factorial_recur (sub n 1)))
	return 1
}

public (factorial_iter n; x) {
	let x = 1
	while (sgt n 0) {
		let x = (mul x n)
		let n = (sub n 1)
	}
	return x
}

public (fibonacci n; a b c) {
	let a = (sub 0 1)
	let b = 1
	(printint a)
	(printint b)
	while (sgt n 0) {
		let c = (add a b)
		(printint c)
		let a = b
		let b = c
		let n = (sub n 1)
	}
	return 0
}
