include "stdlib"

intern (strlen string)
intern (print string)
intern (printi number base)
intern (scan string n)
intern (printf format argc...)

private (strlenUntil char string; len) {
	len := 0
	while (and (loadByte (add string len)) (ne (loadByte (add string len)) char)) {
		len := (add len 1)
	}
	return len
}

private (strlen string; len) {
	len := 0
	while (loadByte (add string len)) {
		len := (add len 1)
	}
	return len
}

private (print string) {
	return (putn string (strlen string))
}

private printi_buffer[32]

private (printi n base; buffer rem) {
	buffer := printi_buffer
	(storeByte buffer 0)
	
	while (gte n base) {
		rem := (mod n base)
		ifelse (lt rem 10) rem := (add rem 48)
		else rem := (add rem 55)
		(storeByte {buffer := (add buffer 1)} rem)
		n := (div n base)
	}

	rem := (mod n base)
	ifelse (lt rem 10) rem := (add rem 48)
	else rem := (add rem 55)
	(storeByte {buffer := (add buffer 1)} rem)
	
	while (loadByte buffer) {
		(putc (loadByte buffer))
		buffer := (sub buffer 1)
	}
}

private (scan buffer n; char) {
	char := (getc)
	while (ne char '\n') {
		n := (sub n 1)
		if (gt n 0) (storeByte buffer char)
		buffer := (add buffer 1)
		char := (getc)
	}
	(storeByte buffer 0)
}

private (printf format args...) {
	while (loadByte format) {
		format := (add format (putn format (strlenUntil '%' format)))
		
		if (eq (loadByte format) '%') {
			format := (add format 1)
			
			ifelse (eq (loadByte format) 's') {
				(print (loadWord args))
				args := (add args WORD_SIZE)
			} else ifelse (eq (loadByte format) 'i') {
				(printi (loadWord args) 10)
				args := (add args WORD_SIZE)
			} else ifelse (eq (loadByte format) 'c') {
				(putc (loadWord args))
				args := (add args WORD_SIZE)
			} else {
				(putc (loadByte format))
			}
			format := (add format 1)
		}
	}
}

